The router should be 99% compatible with current implementation.

99% means all example and the most of tests should work without
modifications but subtle API backward implatible changes are allowed.

First generation (v1) router maps (method, path) pair to web-handler.
Mapping is named *route*. Routes may have unique names.

The main mistake with the design is coupling route to (method, path)
pair while really URL construction operates with *resources*
(*location* is a synonym). HTTP method is not part of URI but applyed
on sending HTTP request. 

Having different route names for the same path is confusing. Moreover
named routes constructed for the same path should have unique
nonoverlapping names which is cumbersome is certain situations.

From other side sometimes it's desirable to bind several HTTP methods
to the same web handler. In v1 router it can be solved by passing '*'
as HTTP method. Class based views require '*' method also usually.

The proposal introduces *Resource* class (with PlainResource and
DynamicResource descendants). Resource has the following attributes:
name, match() and url().


router.add_route('get', '/path/index', handler0)
router.add_route('get', '/path/{to}', handler1, name='a')
router.add_route('post', '/path/{to}', handler2, name='a')


resource1 = router.add_resource('/path/{to}', name='a')
resource2 = router.add_or_find_resource('/path/{to}', name='a')
resource1 is resource2


resource.add_handler('get', handler1)
resource.add_handler('post', handler2)
resource.add_view(MyCBView)
resource.add_handler('*', sink)
resource.add_handler('post', handler3)  # raise

resource['post'] = handler2

resource.add_app(sub)


resource.url(['a', 'b'])

router['a'].url(parts={'a': 'c', 'b': 'd'})

router['a'].url(a='c', b='d').query(md, z=1)

router['a'].url(filename='f.txt').query(md, z=1)

router['a'].url().query(md, z=1)




dt = Application()
dt.router.add_route()
dt.middlewares.append()
dt['dfdsf'] = 23423


def setup(app):
    res = app.route.add_resource('/debugtoolbar')
    res.add_app(dt)
